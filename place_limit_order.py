"""
–†–∞–∑–º–µ—â–µ–Ω–∏–µ –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ Polymarket
–ì–æ—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ API –∫–ª—é—á–∞–º–∏
"""

import os
from dotenv import load_dotenv
from py_clob_client.client import ClobClient
from py_clob_client.clob_types import OrderArgs, OrderType, ApiCreds
from py_clob_client.order_builder.constants import BUY, SELL

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def main():
    # –ó–∞–≥—Ä—É–∂–∞–µ–º API –∫–ª—é—á–∏ –∏–∑ .env
    api_key = os.getenv("CLOB_API_KEY")
    api_secret = os.getenv("CLOB_SECRET")
    api_passphrase = os.getenv("CLOB_PASS_PHRASE")
    host = os.getenv("CLOB_API_URL", "https://clob.polymarket.com")
    private_key = os.getenv("PK")
    funder = os.getenv("FUNDER")  # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –¥–ª—è EOA, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è proxy wallet

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–µ–π
    if not all([api_key, api_secret, api_passphrase, private_key]):
        raise ValueError("–ù–µ –≤—Å–µ –∫–ª—é—á–∏ –Ω–∞–π–¥–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ PK, CLOB_API_KEY, CLOB_SECRET, CLOB_PASS_PHRASE")

    print("‚úì –í—Å–µ –∫–ª—é—á–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ .env")
    print(f"‚úì –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è API: {host}")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞
    CHAIN_ID = 137  # Polygon Mainnet

    # –°–æ–∑–¥–∞–µ–º API credentials
    creds = ApiCreds(
        api_key=api_key,
        api_secret=api_secret,
        api_passphrase=api_passphrase,
    )

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
    client = ClobClient(
        host,
        key=private_key,
        chain_id=CHAIN_ID,
        signature_type=1,  # –ò–∑–º–µ–Ω–∏—Ç–µ –Ω–∞ 0 –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ MetaMask/EOA
        funder=funder,
        creds=creds
    )

    print("‚úì –ö–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω\n")

    # ====================
    # –ü–ê–†–ê–ú–ï–¢–†–´ –û–†–î–ï–†–ê
    # ====================

    TOKEN_ID = "89452825777123819275479300852822806637100581036043674494348493206941034444680"

    # –ù–ê–°–¢–†–û–ô–¢–ï –≠–¢–ò –ü–ê–†–ê–ú–ï–¢–†–´:
    PRICE = 0.50      # –¶–µ–Ω–∞ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö (–æ—Ç 0.00 –¥–æ 1.00)
    SIZE = 10.0       # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
    SIDE = BUY        # BUY (–ø–æ–∫—É–ø–∫–∞) –∏–ª–∏ SELL (–ø—Ä–æ–¥–∞–∂–∞)

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä—ã–Ω–∫–µ
    try:
        print(f"Token ID: {TOKEN_ID}")

        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
        try:
            midpoint = client.get_midpoint(TOKEN_ID)
            print(f"–¢–µ–∫—É—â–∞—è —Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${midpoint}")
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É: {e}")

        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å orderbook
        try:
            orderbook = client.get_order_book(TOKEN_ID)
            if orderbook:
                print(f"–†—ã–Ω–æ–∫: {orderbook.market}")
                if orderbook.bids:
                    print(f"–õ—É—á—à–∏–π bid: ${orderbook.bids[0].price}")
                if orderbook.asks:
                    print(f"–õ—É—á—à–∏–π ask: ${orderbook.asks[0].price}")
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å orderbook: {e}")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ä—ã–Ω–∫–µ: {e}")

    print("\n" + "="*60)
    print("–ü–ê–†–ê–ú–ï–¢–†–´ –õ–ò–ú–ò–¢–ù–û–ì–û –û–†–î–ï–†–ê")
    print("="*60)
    print(f"Token ID: {TOKEN_ID}")
    print(f"–°—Ç–æ—Ä–æ–Ω–∞: {'–ü–û–ö–£–ü–ö–ê (BUY)' if SIDE == BUY else '–ü–†–û–î–ê–ñ–ê (SELL)'}")
    print(f"–¶–µ–Ω–∞: ${PRICE}")
    print(f"–†–∞–∑–º–µ—Ä: {SIZE} —Ç–æ–∫–µ–Ω–æ–≤")
    print(f"–û–±—â–∞—è —Å—É–º–º–∞: ${PRICE * SIZE}")
    print(f"–¢–∏–ø –æ—Ä–¥–µ—Ä–∞: GTC (Good 'Til Cancelled)")
    print("="*60)

    # –ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    confirm = input("\n‚ö†Ô∏è  –†–∞–∑–º–µ—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç –æ—Ä–¥–µ—Ä? (yes/no): ").strip().lower()

    if confirm != 'yes':
        print("–û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
        return

    try:
        # –°–æ–∑–¥–∞–µ–º –æ—Ä–¥–µ—Ä
        print("\nüìù –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞...")
        order_args = OrderArgs(
            token_id=TOKEN_ID,
            price=PRICE,
            size=SIZE,
            side=SIDE
        )

        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –æ—Ä–¥–µ—Ä
        print("‚úçÔ∏è  –ü–æ–¥–ø–∏—Å—å –æ—Ä–¥–µ—Ä–∞...")
        signed_order = client.create_order(order_args)

        # –†–∞–∑–º–µ—â–∞–µ–º –æ—Ä–¥–µ—Ä –Ω–∞ –±–∏—Ä–∂–µ
        print("üöÄ –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –±–∏—Ä–∂–µ...")
        response = client.post_order(signed_order, OrderType.GTC)

        print("\n" + "="*60)
        print("‚úÖ –û–¢–í–ï–¢ –û–¢ –ë–ò–†–ñ–ò:")
        print("="*60)
        print(response)

        # –ü–æ–ª—É—á–∞–µ–º ID —Ä–∞–∑–º–µ—â–µ–Ω–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
        if "orderID" in response:
            order_id = response["orderID"]
            print(f"\nüéâ –û—Ä–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω!")
            print(f"Order ID: {order_id}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞
            print("\nüìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ä–¥–µ—Ä–∞...")
            order_status = client.get_order(order_id)
            print("\n–°—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞:")
            print(f"  Status: {order_status.get('status', 'N/A')}")
            print(f"  Price: ${order_status.get('price', 'N/A')}")
            print(f"  Size: {order_status.get('original_size', 'N/A')}")
            print(f"  Filled: {order_status.get('size_matched', '0')}")

        elif "error" in response:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞:")
            print(f"  {response['error']}")

    except Exception as e:
        print(f"\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()
