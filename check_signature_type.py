"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ signature_type
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–∑–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –∏ –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞–π—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
"""

import os
from dotenv import load_dotenv
from py_clob_client.client import ClobClient
from py_clob_client.clob_types import ApiCreds

load_dotenv()

def test_signature_type(sig_type, funder=None):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π signature_type"""
    try:
        print(f"\n{'='*60}")
        print(f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ signature_type={sig_type}")
        if funder:
            print(f"–° funder: {funder[:10]}...{funder[-8:]}")
        else:
            print("–ë–µ–∑ funder")
        print('='*60)

        host = os.getenv("CLOB_API_URL", "https://clob.polymarket.com")
        private_key = os.getenv("PK")

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        client = ClobClient(
            host,
            key=private_key,
            chain_id=137,
            signature_type=sig_type,
            funder=funder
        )

        # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–µ API –∫–ª—é—á–∏
        print(f"–ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è API –∫–ª—é—á–µ–π —Å signature_type={sig_type}...")
        new_creds = client.create_or_derive_api_creds()

        print(f"‚úÖ –£–°–ü–ï–•! signature_type={sig_type} —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        print(f"\n–ù–æ–≤—ã–µ API –∫–ª—é—á–∏ (—Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∏—Ö!):")
        print(f"CLOB_API_KEY={new_creds.api_key}")
        print(f"CLOB_SECRET={new_creds.api_secret}")
        print(f"CLOB_PASS_PHRASE={new_creds.api_passphrase}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        try:
            balance = client.get_balance_allowance()
            print(f"\n‚úì –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω: {balance}")
        except Exception as e:
            print(f"\n‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {e}")

        return True, new_creds

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å signature_type={sig_type}: {e}")
        return False, None

def main():
    print("="*60)
    print("–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê SIGNATURE TYPE")
    print("="*60)

    private_key = os.getenv("PK")
    existing_funder = os.getenv("FUNDER")

    if not private_key:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω PK –≤ .env —Ñ–∞–π–ª–µ!")
        return

    print(f"‚úì –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –Ω–∞–π–¥–µ–Ω")
    print(f"‚úì Funder –∏–∑ .env: {existing_funder[:10] + '...' + existing_funder[-8:] if existing_funder else '–ù–µ —É–∫–∞–∑–∞–Ω'}")

    # –í—ã—á–∏—Å–ª—è–µ–º –∞–¥—Ä–µ—Å –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
    from eth_account import Account
    if private_key.startswith('0x'):
        account = Account.from_key(private_key)
    else:
        account = Account.from_key('0x' + private_key)

    wallet_address = account.address
    print(f"‚úì –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞: {wallet_address}")

    print("\n" + "="*60)
    print("–ü–†–û–í–ï–†–ö–ê –†–ê–ó–ù–´–• –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ô")
    print("="*60)

    # –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    configs = [
        # (signature_type, funder, description)
        (0, None, "EOA/MetaMask –±–µ–∑ funder"),
        (0, wallet_address, "EOA/MetaMask —Å funder = –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞"),
        (1, existing_funder, "Proxy wallet —Å funder –∏–∑ .env"),
        (1, wallet_address, "Proxy wallet —Å funder = –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞"),
        (2, existing_funder, "Browser wallet proxy —Å funder –∏–∑ .env"),
        (2, wallet_address, "Browser wallet proxy —Å funder = –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞"),
    ]

    working_config = None

    for sig_type, funder, description in configs:
        print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞: {description}")
        success, creds = test_signature_type(sig_type, funder)

        if success:
            working_config = (sig_type, funder, creds)
            print(f"\n{'='*60}")
            print(f"üéâ –ù–ê–ô–î–ï–ù–ê –†–ê–ë–û–ß–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø!")
            print(f"{'='*60}")
            print(f"signature_type={sig_type}")
            print(f"funder={funder if funder else 'None'}")
            print(f"\n–û–±–Ω–æ–≤–∏—Ç–µ –≤–∞—à .env —Ñ–∞–π–ª:")
            print(f"FUNDER={funder if funder else ''}")
            print(f"\n–ò –∑–∞–º–µ–Ω–∏—Ç–µ —Å—Ç–∞—Ä—ã–µ API –∫–ª—é—á–∏ –Ω–∞ –Ω–æ–≤—ã–µ:")
            print(f"CLOB_API_KEY={creds.api_key}")
            print(f"CLOB_SECRET={creds.api_secret}")
            print(f"CLOB_PASS_PHRASE={creds.api_passphrase}")

            print(f"\n–í place_limit_order.py –∏–∑–º–µ–Ω–∏—Ç–µ —Å—Ç—Ä–æ–∫—É 46 –Ω–∞:")
            print(f"signature_type={sig_type},  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø –¥–ª—è –≤–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞")

            break

    if not working_config:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—á—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é!")
        print("\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("1. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á")
        print("2. –ö–æ—à–µ–ª–µ–∫ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ Polymarket")
        print("3. –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é")
        print("\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:")
        print("- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –≤ .env")
        print("- –ó–∞–π—Ç–∏ –Ω–∞ polymarket.com —Å —ç—Ç–∏–º –∫–æ—à–µ–ª—å–∫–æ–º")
        print("- –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –∫–æ—à–µ–ª–µ–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")

if __name__ == "__main__":
    main()
