"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö API –∫–ª—é—á–µ–π —Å —Ä–∞–∑–Ω—ã–º–∏ signature_type
–ü–æ–º–æ–≥–∞–µ—Ç –Ω–∞–π—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –≤–∞—à–∏—Ö –∫–ª—é—á–µ–π
"""

import os
from dotenv import load_dotenv
from py_clob_client.client import ClobClient
from py_clob_client.clob_types import ApiCreds, OrderArgs
from py_clob_client.order_builder.constants import BUY

load_dotenv()

def test_config(sig_type, funder=None):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ API –∫–ª—é—á–∞–º–∏"""
    try:
        print(f"\n{'='*60}")
        print(f"–¢–µ—Å—Ç: signature_type={sig_type}, funder={'–î–∞' if funder else '–ù–µ—Ç'}")
        print('='*60)

        api_key = os.getenv("CLOB_API_KEY")
        api_secret = os.getenv("CLOB_SECRET")
        api_passphrase = os.getenv("CLOB_PASS_PHRASE")
        host = os.getenv("CLOB_API_URL", "https://clob.polymarket.com")
        private_key = os.getenv("PK")

        creds = ApiCreds(
            api_key=api_key,
            api_secret=api_secret,
            api_passphrase=api_passphrase,
        )

        client = ClobClient(
            host,
            key=private_key,
            chain_id=137,
            signature_type=sig_type,
            funder=funder,
            creds=creds
        )

        print(f"‚úì –ö–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω")

        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞
        print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞: –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤...")
        from py_clob_client.clob_types import OpenOrderParams
        orders = client.get_orders(OpenOrderParams())
        print(f"‚úì –û—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞ –ø–æ–ª—É—á–µ–Ω—ã: {len(orders)} —à—Ç.")

        # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –∏ –ø–æ–¥–ø–∏—Å–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ä–¥–µ—Ä (–Ω–æ –ù–ï —Ä–∞–∑–º–µ—â–∞—Ç—å!)
        print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞: —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ—Ä–¥–µ—Ä–∞...")
        test_order = OrderArgs(
            token_id="89452825777123819275479300852822806637100581036043674494348493206941034444680",
            price=0.01,  # –û—á–µ–Ω—å –Ω–∏–∑–∫–∞—è —Ü–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∞
            size=1.0,
            side=BUY
        )
        signed_order = client.create_order(test_order)
        print(f"‚úì –û—Ä–¥–µ—Ä –ø–æ–¥–ø–∏—Å–∞–Ω —É—Å–ø–µ—à–Ω–æ")

        print(f"\nüéâ –£–°–ü–ï–•! –≠—Ç–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        print(f"{'='*60}")
        print(f"signature_type={sig_type}")
        if funder:
            print(f"funder={funder}")
        print(f"\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ place_limit_order.py:")
        print(f"  signature_type={sig_type},")
        if funder:
            print(f"  funder='{funder}',")

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def main():
    print("="*60)
    print("–ü–†–û–í–ï–†–ö–ê –°–£–©–ï–°–¢–í–£–Æ–©–ò–• API –ö–õ–Æ–ß–ï–ô")
    print("="*60)

    private_key = os.getenv("PK")
    existing_funder = os.getenv("FUNDER")
    api_key = os.getenv("CLOB_API_KEY")

    if not all([private_key, api_key]):
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–ª—é—á–∏ –≤ .env!")
        return

    print(f"‚úì –í—Å–µ –∫–ª—é—á–∏ –Ω–∞–π–¥–µ–Ω—ã –≤ .env")

    # –í—ã—á–∏—Å–ª—è–µ–º –∞–¥—Ä–µ—Å –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
    from eth_account import Account
    if private_key.startswith('0x'):
        account = Account.from_key(private_key)
    else:
        account = Account.from_key('0x' + private_key)

    wallet_address = account.address
    print(f"‚úì –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: {wallet_address}")
    if existing_funder:
        print(f"‚úì Funder –∏–∑ .env: {existing_funder}")

    print("\n–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...\n")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    configs = [
        (0, None, "EOA/MetaMask –±–µ–∑ funder"),
        (0, wallet_address, "EOA/MetaMask —Å wallet –∞–¥—Ä–µ—Å–æ–º"),
        (0, existing_funder, "EOA/MetaMask —Å funder –∏–∑ .env") if existing_funder else None,
        (1, None, "Proxy wallet –±–µ–∑ funder"),
        (1, existing_funder, "Proxy wallet —Å funder –∏–∑ .env") if existing_funder else None,
        (1, wallet_address, "Proxy wallet —Å wallet –∞–¥—Ä–µ—Å–æ–º"),
        (2, existing_funder, "Browser proxy —Å funder –∏–∑ .env") if existing_funder else None,
        (2, wallet_address, "Browser proxy —Å wallet –∞–¥—Ä–µ—Å–æ–º"),
    ]

    configs = [c for c in configs if c is not None]

    found = False
    for sig_type, funder, description in configs:
        print(f"\nüîç {description}")
        if test_config(sig_type, funder):
            found = True
            break

    if not found:
        print("\n" + "="*60)
        print("‚ùå –ù–ï –ù–ê–ô–î–ï–ù–ê –†–ê–ë–û–ß–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø")
        print("="*60)
        print("\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("1. API –∫–ª—é—á–∏ –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã —Å –¥—Ä—É–≥–∏–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–º –∫–ª—é—á–æ–º")
        print("2. API –∫–ª—é—á–∏ —É—Å—Ç–∞—Ä–µ–ª–∏ –∏–ª–∏ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã")
        print("\n–†–µ—à–µ–Ω–∏–µ:")
        print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç check_signature_type.py –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö API –∫–ª—é—á–µ–π:")
        print("  python check_signature_type.py")

if __name__ == "__main__":
    main()
